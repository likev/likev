//windows.h 文件中包含应用程序中所需的数据类型和数据结构的定义
#include<windows.h>
//----------------------窗口函数----------------------------------------------------
LRESULT CALLBACK WndProc(HWND hwnd,UINT message,WPARAM wParam,LPARAM lParam)  //
{
	switch(message)
	{
	case WM_DESTROY:		//调用PostQuitMessage()发出WM_QUIT消息
		PostQuitMessage(0);	break;
	default:				//默认时采用系统消息默认处理函数
		return DefWindowProc(hwnd,message,wParam,lParam);
	}
	
}

//-----------------以下初始化窗口类---------------------------
int WINAPI WinMain(HINSTANCE hInstance,HINSTANCE hPrevInst,LPSTR lpszCmdLine,int nCmdShow)
{
	HWND hwnd;		//标识窗口的句柄。    句柄（handle）是整个Windows编程的基础，是指 Windows 使用的一个唯一的整数值，
	                //                    用于标识应用程序中不同的对象和同类对象中不同的实例。
	MSG  Msg;	   // 数据结构MSG包含一个消息的全部信息。
	WNDCLASS wndclass;	// 结构WNDCLASS包含一个窗口类的全部信息。
	
        char lpszClassName[]="chuangkou";      //窗口类名
	char lpszTitle[]="我的窗口";		   //窗口标题名
	
    //----窗口类的定义------
	wndclass.style=0;					   //窗口类型为默认类型
	wndclass.lpfnWndProc=WndProc;//----------窗口处理函数为WndProc
	wndclass.cbClsExtra=0;				   //窗口类无扩展
	wndclass.cbWndExtra=0; //----------------窗口实例无扩展
	wndclass.hInstance=hInstance;			  //当前实实例句柄
	wndclass.hIcon=LoadIcon(NULL,IDI_APPLICATION);	 //窗口的最小化图标为默认图标
	wndclass.hCursor=LoadCursor(NULL,IDC_ARROW);	 //窗口采用箭头光标
	wndclass.hbrBackground=(HBRUSH)GetStockObject(WHITE_BRUSH);	  //窗口背景为白色
	wndclass.lpszMenuName=NULL;									//窗口中无菜单
	wndclass.lpszClassName=lpszClassName;						//窗口类名chuangkou
	
	
	//----一下进行窗口类的注册----------
	if(! RegisterClass(&wndclass))
	{
		MessageBeep(0);								  //注册失败则发出警告声音
		return FALSE;
	}
	
	//------------创建窗口---------------
	
	hwnd=CreateWindow(lpszClassName,		//窗口类名
		lpszTitle,			 //窗口标题名
		WS_OVERLAPPEDWINDOW|WS_HSCROLL|WS_VSCROLL,	 //	窗口风格
		700,		 //	窗口左上角横坐标X
		200,		 //	数坐标Y
		400,		 //	窗口的宽
		500,		 //	高和
		NULL,					 //	 此窗口无父窗口
		NULL,					 //	 此窗口无主菜单
		hInstance,			 //	 创建此窗口应用程序的当前句柄
		NULL);				//	  不使用该值
	
	ShowWindow(hwnd,nCmdShow);		//显示窗口
	UpdateWindow(hwnd);				 //	绘制用户区
	
	while(GetMessage(&Msg,NULL,0,0)) //	消息循环
	{									 
		TranslateMessage(&Msg);		//将消息的虚拟键转换为字符消息  &Msg是指向MSG结构的指针，像是引用变量？
		DispatchMessage(&Msg);		//将参数Msg指向的消息传送到窗口函数
	}
	return Msg.wParam;			   //程序终止时将消息返回系统
}

